package com.sist.main;

import java.lang.reflect.Method;

/*
 * 	프로그램 
 * 	-------
 * 	  1. 데이터 저장 => 메모리 / 파일 / 데이터베이스(오라클)
 * 						|    ------------------------> 제어가 불가능 (자바에서)
 * 						|
 * 					  자바에서는 파일/데이터베이스 읽은 데이터를 메모리에 저장 후 관리
 * 			자바에서 사용하는 용어
 * 			-----------------
 * 			 1) 변수 / 상수 => 한개 데이터를 저장하는 공간
 * 					 => 저장 공간의 크기 (데이터형)
 * 						----------------------------------------
 * 						 정수
 * 							byte (1 byte) => -128~127 => overflow
 * 							   => 웹 (파일 업로드 / 파일 다운로드), application (네트워크 전송)
 * 											   |		 			 | 
 * 											WebSocket			채팅/쪽지 보내기 => socket
 * 							int (4 byte) => 프로그램에서 사용하는 모든 정수는 int를 인식한다
 * 											-21억 4천 ~ 21억 4천
 * 							long (8 byte) => 금융권 / 공기업 / 빅데이터 / AI
 * 							
 * 							 => 오라클에서 보내준 데이터를 받은 경우 
 * 							    -----
 * 								NUMBER, NUMBER(4) => int
 *                     ---------------------------------------------------------------------
 *                      실수
 *                      	double (8 byte) => 일반적인 실수 저장할 때 사용하는 공간    
 *                          => 오라클 -> NUMBER(7,2) => double
 * 					   ----------------------------------------------------------------------
 * 						논리형
 * 							boolean(1 byte) : true/false
 * 							=> 오라클에는 존재하지 않는다 (CHAR, NUMBER)
 * 					   ----------------------------------------------------------------------
 * 						문자/문자열
 * 							String : 웹, 윈도우 => 가장 많이 사용되는 데이터형
 * 							=> 오라클 : VARCHAR2	
 * 						  (1) 오라클 컬럼과 매칭
 * 							 EMPNO    NOT NULL NUMBER(4)     => int empno     (사번)
							 ENAME             VARCHAR2(10)  => String ename  (이름)
							 JOB               VARCHAR2(9)   => String job    (직위)
							 MGR               NUMBER(4)     => int mgr        (사수번호)
                             HIREDATE          DATE          => Date hiredate  (입사일)
                             SAL               NUMBER(7,2)   => double sal     (급여)
                             COMM              NUMBER(7,2)   => double comm    (성과급)
                             DEPTNO            NUMBER(2)     => int deptno     (부서 번호)
                            ====================================================================
                             숫자형 ( NUMBER => int, double)
                             문자형 ( CHAR/VARCHAR2/CLOB => String)
                             		 1~2000  1~4000  4기가
                             		 	** 한글 한글자당 3byte
                             날짜형 ( DATE => java.util.Date)
                             		 	
 * 						  (2) 웹에 출력된 데이터 : 데이터 추출 (데이터형)
 * 					 ** 변수 / 클래스 / 배열 => 남발하면 프로그램을 짜기 어렵다
 * 						  => 한개의 이름으로 제어 => 모음		
 *  
 *              2) 데이터가 많은 경우에 데이터를 모아서 관리
 *                    => 묶어서 사용 : 반복문 사용 => 소스가 간결하게 만든다
 *                    int a~z 26개 변수 설정 => 가장 큰 값, 작은 값 출력
 *                    		  -- if문 큰 값 25개 , 작은 값 25개 => 50개의 if문 사용해야 함
 *                    => 같은 데이터형을 묶어서 한개 이름으로 제어
 *                    	 ----------        ------- 배열 (구분자 => 인덱스로 구분) => 개수 지정됨
 *                    						  데이터형[] 배열명 = new 데이터형 [개수]
 *                    => 다른 데이터형이 여러개 존재 -> 한 개의 이름으로 제어 ===> 클래스 ( 구분자 : 메모리 주소값 -> 객체) => new 생성자() -> 따로 저장된다
 *                         ---> 한개의 이름으로 모아서 관리 : 인터페이스, 컬렉션을 이용해서 관리
 *                      *** 정수 10개 => 배열
 *                      *** 클래스 10개 => 컬렉션 : 배열의 단점을 보완
 *                      
 *                   ===> 변수의 종류 
 *                   ----------------------- 메소드에서만 사용 가능 --------------------------
 *                   	1. 지역 변수 : 메소드 안에 선언되는 변수 => 루프 변수, 결과값 전송하는 변수
 *                   	2. 매개 변수 : 사용자가 보내준 요청 (사용자의 요청값) 
 *                                   => 3개 이상을 초과하지 않는다 (3개 이상은 배열이나 클래스 이용)
 *                                   
 *                   -------------- 프로그램 종료시까지 사용 (다른 클래스에서 사용이 가능) ----------
 *                      3. 인스턴스 : 메모리 공간이 따로 생기는 공간 => new 사용시마다 생성
 *                      4. 공유변수(정적변수) : 모든 객체가 공통으로 사용이 가능 => 한개의 메모리 생성
 *                   ----------------------------------------------------------------------   
 *                                       
 *                   => 자바에서 지원하는 메모리 공간
 *                   -------------- Method Area --------------
 *                        Method가 저장 (Method는 메소드명이 주소)
 *                        공유변수 (static)
 *                   ----------------- Stack -----------------     
 *                                       
 *                   ----------------- Heap ------------------
 *                   
 *                   -----------------------------------------
 *                                       
 *               => 사용자 요청에 따라서 제어
 *                  --------------------
 *                    1) 연산자
 *                    		단항연산자
 *                    			= 증감연산자 (++,--)
 *                    				전치연산자/후치연산자 => a++ => 무조건 1개 증가한다
 *                    									a-- => 무조건 1개 감소를 한다
 *                    									 => 반복문에서 주로 사용
 *                    			= 부정연산자 (!) => 반대 => true / false
 *                    					String finddata="";
 *                    					 => if(data.contains(finddata)) => LIKE, REGEXP_LIKE()
 *                    						=> if(!data.contains(finddata))
 *                                       => 예약일 / 예약이 없는 날
 *                                       => 오라클 : <>
 *                                       => 웹 => 대부분은 오라클 명령어를 이용해서 데이터 추출
 *                                       				 --------- 모든 데이터는 오라클에 저장후에 사용
 *                                       									  -----
 *                                       										| 영구적인 저장장치
 *                                       										| 모든 사용자가 공유 가능
 *                                       => 자바 
 *                                          --- 
 *                                          최종 
 *                                          
 *                    			= 형변환연산자((데이터형))
 *                    				왼쪽에서 받는 변수(클래스)가 크거나 같다 
 *                    				--------------------------------
 *                    					값을 받는 데이터 = 대입할 값
 *                    				-------------------------------
 *                    					기본 데이터형 크기 
 *                    				
 *                    				클래스 크기 : (상속 / 포함)의 경우만 비교 가능
 *                    				
 *                                  상속도 
 *                                  
 *                    				위로 올라가면 공통점이 많고, 아래로 내려가면 구체적이다
 *                    				
 *                    		이항연산자
 *                    			** 프로그램언어는 연산시에 같은 데이터형만 연산이 가능 (bit 수 같아야 처리가 된다)
 *                    						  -----------------------------
 *                    							=> 더 큰 데이터형으로 (자동으로) 변경 후 수행 (작은 데이터형으로 통합도 가능하다)
 *                    			** 산술 규칙
 *                    			= 비교연산자 = 
 *                    		    
 *                          
 *                          삼항연산자 
 *                          
 *                          예)
 *                          	<%
 *                          		int curpage = 1;
 *                          	    int totalpage = 10;
 *                          		
 *                          		if(curpage>1)  이전
 *                          		{
 *                          			curpage--;
 *                          	%>
 *                          		<a href = "list.jsp?page=<%=curpage%>">
 *                              <%
 *                                 }
 *                                 if (curpage<totalpage) 다음
 *                                 	{
 *                                 		curpage++;
 *                              %>
 *                              	<a href = "list.jsp?page=<%=curpage%>">
 *                              <%
 *                              	}
 *                              %>
 *                          
 *                          삼항연산자 활용)
 *                          
 *                              <a href = "list.jsp?page=<%=curpage>1?curpage--:curpage%>">이전
 *                              <a href = "list.jsp?page=<%=curpage<totalpage?curpage++:curpage%>"> 다음
 *                          
 *                              => 자바 + HTML => JSP => 작은 사이트 제작
 *                                 자바 / HTML => 분리 => MVC 
 *                          
 *                          
 *          -------------------------------------------------------------------------------------------------------- 1일차 공부 분량                
 *                          
 *                    2) 제어문
 *                    	조건문
 *                    	  		-> 단일 조건문
 *                    				if(조건) => 조건(결과값 : true, false) 		
 *                    
 *                    			-> 선택 조건문
 *                    
 *                    			-> 다중 조건문
 *                    	           
 *                                ==> 조건에 맞는 모든 문장 수행 => 단일 조건문 여러개
 *                                ==> 조건에 맞는 문장 1개 => 다중 조건문을 사용한다
 *                                ==> 오라클에서 어려운 부분 --> 다중 조건이 있는 경우
 *                                							-----------------
 *                             			ex) 맛집 
 *                             				 = 맛집명
 *                             				 = 테마
 *                             				 = 주소
 *                             				 = 맛집명+테마 
 *                             				 = 맛집명+주소
 *                             	             = 동적 쿼리
 *                               ------------------------------------- 웹 + 데이터베이스 
 *                                   
 *                    
 *                    	반복문 (for, while) : 화면 출력 => HTML(JSP)
 *                            
 *                         - for, for-each : 반복 횟수가 지정되면 사용
 *                               
 *                            for   
 *                            형식) 
 *                            		for(초기값; 조건식; 증가식)
 *                            		{
 *                            			실행문장
 *                            		}
 *                            	  -> 초기값을 증가해서 => 조건이 false일 때 까지 수행
 *                                -> 초기값 => 조건식 => 실행문장 => 증가식
 *                                           => 조건식 => 실행문장 => 증가식
 *                                           => 조건식 => 실행문장 => 증가식
 *                                           => 조건식 => 실행문장 => 증가식
 *                                                | false면 종료
 *                             for-each 구문
 *                              형식)
 *                              	for(데이터형 변수:배열,컬렉션)
 *                              		{
 *                              			실행문장 => 변수는 실제 저장된 데이터값을 가지고 온다
 *                              			** 데이터형은 배열, 컬렉션에 저장된 데이터형과 동일하거나 크다.
 *                              		}                   
 *                              		=> 웹에서 출력시 대부분이 for-each 를 사용한다
 *                              
 *                             2차 for 
 *                             		-> 자바 개발에서는 빈도수가 적다
 *                             		-> 코딩테스트/기술면접/테스트지 에서 자주 나온다 
 *                              형식)
 *                              	 for(초기값;조건식;증가식) ==> 줄수
 *                              	 {
 *                              		for(초기값;조건식;증가식) ==> 한줄에 몇개의 데이터 출력 
 *                              		  {
 *                              				실행문장
 *                              		  }
 *                                   }			 
 *                             				
 *                                       ** for => 숫자의 패턴(수열)이 있는 경우에만 수행
 *                                 
 *                              
 *                              
 *                            while : 반복 횟수가 없는 경우 (무한 스크롤)
 *                                    => 데이터 베이스 : 반복횟수를 알 수 없다
 *                                    	=> 게시판/회원
 *                                    	   --------- 데이터가 없을 때까지 반복 rs.next()
 *                                     
 *                                                         
 *                    	반복제어문(break) : 반복문을 중단하는 경우에 사용
 *           ---------------------------------------------------------------------------------------------- 2일차 => 기본문법
 *                    
 *               => 묶기 시작 => 한개의 이름으로 제어
 *                                     -------- 소스가 간결 / 유지보수가 편리하다
 *                    1) 관련되는 명령문을 묶어서 사용 => 재사용 / 반복제거 / 에러 / 기능편리 추가                
 *                       ---------------------- 메소드
 *                       
 *                        => 배열 : 일차원 배열
 *                        	 ----------------
 *                        		1. 선언 
 *                        			-> 데이터형[] 배열명; => 권장
 *                        				------
 *                        			   데이터형 배열명[]; => c언어 호환 
 *                        
 *                        		2. 초기값
 *                        			-> 데이터형[] 배열명={값,값...};
 *                        			   데이터형[] 배열명=new 데이터형[개수]; => 기본값으로 초기화
 *                        
 *                        		3. 값 변경
 *                        			 -> 인덱스 => 0번부터 시작
 *                        				  배열명[0]=값
 *                        
 *                        		4. 출력 
 *                        			=> for-each : 출력 전용
 *                        			=> 값을 변경 => 일반 for (인덱스번호를 이용해서 처리) => 0
 *                        			
 *                        		=> 단점 
 *                        				고정적 => 한번 지정하면 변경이 어렵다 (저장 개수)
 *                                      ------------------------------
 *                                      	개수가 틀린 경우에 처리하기 어렵다
 *                                          검색, 데이터베이스 프로그램은 배열 사용이 어렵다 => 개선 -> 가변형(컬렉션)
 *                             
 *                              => 컬렉션 (ArrayList)
 *                              		 ----------
 *                              *** 명령문을 모아서 관리 => 메소드
 *                              	리턴형 : 요청에 대한 처리값
 *                              			 1) 기본형 => int, String ---> 총 페이지
 *                              			 2) 데이터가 여러개 => ArrayList ==> SELECT
 *                              			 3) 관련된 데이터 : 사용자 정의 데이터형 ====> SELECT에서 조건이 있는 경우
 *                              			    ---------- 상세 보기             	           
 *                                  매개변수 : 사용자가 요청한 값 => 입력/클릭 => 브라우저
 *                                  메소드명 : 약속 => 소문자로 시작 / 운영체제의 호환 => 알파벳을 이용한다
 *                                  			=> cp949 , euc-kr , utf-8
 *                                  			=> Git에서 한글 깨짐이 많다     
 *                                   
 *                                   1) 형식    
 *                                          [접근지정어][제어어] 리턴형 메소드명(매개변수목록) => 선언부
 *                                           {
 *                                           		구현부
 *                                           		return 값; ==> void일때만 생략이 가능
 *                                           }
 *                                          
 *                                           = 접근지정어 : 특별한 경우가 아니면 => public
 *                                           			  다른 클래스 통신을 할 수 있게 한다
 *                                           = 제어어 : 
 *                                           		   static => 공통 사용 기반 => 데이터베이스 (MyBatis)
 *                                           		   abstract => 선언하는 메소드 => 프로그램에 맞게 구현해서 사용
 *                                   
 *                                   2) 종류
 *                                   	리턴형       매개변수
 *                                      -------------------
 *                                        o           o =====> 가장 많이 사용
 *                                        o           x =====> 자체에서 처리 결과
 *                                       ------------------------------------- SELECT 
 *                                        x           o =====> 데이터베이스
 *                                        x           x =====> 빈도수가 거의 없다
 *                                       ------------------------------------- INSERT/UPDATE/DELETE
 *                                       
 *                                       사용자 요청 => 검색결과를 브라우저에 출력해달라
 *                                       	=> 리턴형         /    매개변수
 *                                       	   ----- ArrayList    ------ String => 검색어
 *                                          ex) 맛집의 상세보기
 *                                          		=> 리턴형 / 매개변수
 *                                          		   ----   ------ 맛집 번호 =>int
 *                                                      |Food
 *                                          ex) 로그인 요청
 *                                          	     => 리턴형 / 매개변수
 *                                          			----    ------ id,pwd
 *                                          			String, int => 가독성
 *                                                      
 *                                                      경우의 수 3개
 *                                                      1) 아이디가 없는 경우
 *                                                      2) 비밀번호가 틀린 경우
 *                                                      3) 아이디, 비밀번호가 맞는 경우
 *                                                      
 *                                                      아이디나 비밀번호가 틀립니다 ====> 사용자 중심의 프로그램
 *                                             Board에 등록
 *                                             	  => 리턴형 / 매개변수
 *                                             		 ----    ------  이름, 제목, 내용, 비밀번호
 *                                             						 ---------------------- 클래스 묶어서 전송
 *                                             			없는 상태 => void
 *                                             				                 
 *                                       HYML/CSS 사용자 정의 없음 => 에러가 없다 (화면이 이상하다)
 *             ---------------------------------------------------------------------------------------------------
 *                3) 클래스
 *                		=> 구성요소 => 역할
 *                			 class ClassName
 *                			{    => 반드시 설정 (접근 범위) => 접근 지정어
 *                				 -------------------------
 *                				  변수
 *                					인스턴스 변수 => new 사용시마다 새로운 메모리 생성
 *                					[접근지정어] 데이터형 변수명; ===============> 라이브러리를 제외하고 사용자 정의 은닉화
 *                					private      	  -----
 *                								       기본형 (int, long...)
 *                										배열 
 *                										클래스 => String		
 *                                   ====================== 인스턴스 변수를 기본으로 사용한다
 *                					공유 변수 (정적변수 => static) => 한개만 생성 : 데이터 묶음 (모든 클라이언트가 동일)
 *                			     -------------------------
 *                                생성자 ,      초기화 블록
 *                                ----       --------  없는 경우도 존재 => 생성자는 없는 경우에 자동으로 디폴트 생성자 추가 
 *                                |멤버변수의 초기화 
 *                                 -------------
 *                                 변수가 명시적인 초기화 가능 : 생성자 (사용 X)
 *                                 명시적인 초기화가 아니라 구현후에 초기화시에는 사용
 *                                 
 *                                 private int a = 10; 
 *                                 		==> 파일 읽기 => 데이터 초기화
 *                                 		==> 데이터베이스에서 데이터 읽기
 *                                 		*** 클래스
 *                                 			class ClassName
 *                                 			{
 *                                 				선언만 가능
 *                                 				  => 예외처리, 메소드 호출, 연산자, 제어문 => 구현
 *                                 			}
 *                                      
 *                                        * class ClassName
 *                                        {
 *                                        	{ // 새로운 블럭을 열어야 가능
 *                                        		try
 *                                        		{
 *                                        		}catch(Exception e)
 *                                        	}
 *                                        }
 *                                        => 가급적이면 인스턴스 초기화 => 생성자
 *                                            static 초기화 => static {}
 *                                        => 데이터베이스 드라이버 등록
 *                                        	  화면UI
 *                                        	  시작과 동시에 처리하는 명령문이 있는 경우
 *                                        => 생성자 => public을 사용한다 => 다른 클래스에서 연결하기 위해     	
 *                                 -----------------------------------
 *                                 메소드 
 *                                 -----------------------------------
 *                				 -------------------------
 *                				  메소드
 *                               -------------------------
 *                           }
 *                           
 *                		=> 클래스 종류
 *                			=> 추상 클래스
 *                			=> 인터페이스
 *                		=> 객체지향의 3대 특성 : 권장사항
 *                          => 데이터 보호 : 캡슐화  ****** 시큐어 코딩의 기본
 *                          	  => 데이터 은닉화 => 메소드로 접근
 *                          			private     getter/setter ==> lombok => Spring에서 자동 첨부
 *                          => 재사용 : 상속, 포함
 *                          => 추가, 변경 : 오버라이딩, 오버로딩
 *                           
 *                				                      
 *                                       
 */
import java.util.*;
// 메모리 할당 => 메모리에 저장
class Human
{
	public void display()
	{
		System.out.println("Human:display() Call...");
	}
}
class Sawon
{		// 선언순서와 관계없이 실행 될 때 마다 저장 순서가 바뀐다
	public void aaa()
	{
		System.out.println("Sawon:aaa() Call...");
	}
	public void bbb()
	{
		System.out.println("Sawon:bbb() Call...");
	}
	public void ccc()
	{
		System.out.println("Sawon:ccc() Call...");
	}
}
public class 최종정리 {
	public static void main(String[ ]args) throws Exception{
	Human h1 = new Human(); // => 결합성이 높다 => 다른 클래스에 영향이 많다
	h1.display();
	Human h2= new Human().getClass().getDeclaredConstructor().newInstance();
	h2.display();
	Human h3 = Human.class.getDeclaredConstructor().newInstance();
	h3.display();
//	================= 가장 많이 사용되는 메모리 할당 : 스프링에서 주로 사용
	Class clsName = Class.forName("com.sist.main.Human");
	Method[] methods = clsName.getDeclaredMethods();
    Human h4 = (Human)clsName.getDeclaredConstructor().newInstance(); // getDeclaredConstructor() ->디폴트 생성자 호출 먼저하고 newInstance(); -> 객체 생성
    System.out.println("메소드명 없이 호출");
    methods[0].invoke(h4,null);
    // 매개변수
    System.out.println("메소드명 사용");
    h4.display();
    
//		int[] arr= new int[10];
//		for(int i=0; i<arr.length;i++) 
//       {
//			 arr[i]=i+1;
//	     }
//			
//		}
    	Class cls = Class.forName("com.sist.main.Sawon");
    	Object obj = cls.getDeclaredConstructor().newInstance();
    	Method[] ms = cls.getDeclaredMethods();
    	
    	Scanner scan = new Scanner(System.in);
    	System.out.print("호출할 메소드명 입력");
    	String mName=scan.next();
    	// Annotation => 구분자 만들때 사용함 => 스프링  ex) @override
    	for(int i=0; i<ms.length; i++)
    	{
    		String s = ms[i].getName();
    		if(mName.equals(s)) 
    		{
//    		System.out.println(i+":"+ms[i].getName());
    			ms[i].invoke(obj, null);
    			// invoke ==> 메소드 호출 ==> () <= 매개변수
    	    }
	}			
	}
}
