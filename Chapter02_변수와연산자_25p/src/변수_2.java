/*
 * 1. 변수 선언
 *    1) 변수 : 1개의 데이터를 저장하는 메모리 공간의 이름 (주소 대신에, 메모리 어디에 저장될 지 모르기 때문에 이름 필요, 저장한 데이터 읽기 쓰기 편하기 위해)
 *          => 데이터 변경이 가능/ 데이터형이 있으면 선언한다는 것을 의미
 *          
 *    2) 상수 : 1개의 데이터를 저장하는 메모리 공간 이름
 *          => 데이터 변경이 불가능 
 *          -> 변수와 상수의 구분은 final 로 함.
 *          => 표현형식 : final 데이터형 상수명 = 값 -> 값을 고정하는 것 
 *          
 *    3) 리터럴 : 실제 저장된 값(메모리)
 *    
 * 2. 변수 명칭법 => 식별자 => 같은 곳에서 같은 이름의 변수는 사용이 불가능하다.
 *    => 알파벳이나 한글로 시작 (대소문자 구분)
 *    
 * 3. 데이터형(타입), 기본형 ==> 27page
 *      형식)
 *      데이터타입 변수명;
 *      ------> 정수, 실수, 문자, 논리
 *      ------------------------------------
 *      정수형 
 *       byte  => 1byte (사용범위 : -128~127)
 *                 사용처 : 파일읽기 , 업로드 , 다운로드 ,네트워크 통신
 *       int   => 4byte (사용범위 : -21억4천 ~ 21억 4천)
 *             => 가장 많이 사용하는 정수형(디폴트값)
 *                 사용처 : 모든 프로그램의 정수형이 필요한 경우
 *       long  => 8byte  (2^63)
 *       		   사용처 : 데이터 수집 => 라이브러리 제작할 때
 *                   ex)영화 댓글 모아서 긍정/부정 따져보고 추천해주는 기능 만들때 사용
 *       bit => 0이나 1만 저장하는 공간 / 8bit = 1byte
 *       --------------------------------- 음수/양수
 *            |음/양|   |   |   |   |   |   |
 *             1(음)
 *             0(양)
 *          ---------------------------------
 *          11111111
 *          01111111
 *       양수/음수 바꾸는 거 https://blog.naver.com/choixj/222338072428 참고 
 *    *1의 보수 / 2의 보수
 *         == 01111111
 *      1) Change 
 *         0->1
 *         1->0
 *         10000000 => 1의 보수
 *        +       1
 *        ----------
 *        100000001 => 2의 보수 
 *      -----------------------------------
 *      논리형 : boolean => true/false
 *             조건이 있는 경우에 주로 사용 ex) 로그인, 검색어, 페이지 등...
 *             boolean => 변수 설정할 때 앞에 b를 많이 넣는 편  ex) bLogin, bCheck....
 *             - 사용법 
 *             boolean bCheck = false            
 *      -----------------------------------
 *      문자형 : char => 2byte (0~65535)
 *             문자는 양수로만 되어 있다
 *             => 표현하는 문자가 많이 있다.
 *             => Unicode : 각국의 언어를 사용할 수 있다.
 *             => char는 문자 한개만 저장이 가능 => ''
 *                *문자 여러개 저장 할 때 는 ""=> char 사용X => String (char 배열) 사용
 *             => char는 저장시에 해당 번호로 변경해서 저장 (ASC 코드)
 *             - 사용법 (31 page)
 *               char fname='홍';
 *               char alpha='A';
 *                * A+, A-  같은 애들은 char 사용 못함..-> "A+","A-"
 *             => char는 연산시에 무조건 정수형으로 변경 처리된다!
 *                'A'+1 => 66
 *                 ┗ 65
 *              * "A"+1 => "A1"
 *      
 *      * 7+"7"+7+7 ==> "7777"  ==> 문자열 결합
 *        7+7+"7"+7 ==> "1477"        
 *                     
 *      *** 정수 표현법 10진법/8진법/16진법/2진법
 *            10 , 20  ===> 10진법
 *            010  
 *            -- 8진법 
 *            0x11 
 *            -- 16진법
 *            0b1000
 *            -- 2진법       
 *             
 *      -----------------------------------
 *      실수형 : 소수점
 *             float => 4byte => 소수점 6자리 => ex) 10.5F(f)
 *             double => 8byte => 소수점 15자리
 *             double => 실수형의 default => 10.5
 *      ----------------------------------
 *      참조형 : 데이터를 여러개 한번에 저장하는 방법 
 *                ex) 배열/클래스
 *     
 * 4. 각 데이터형별 사용법
 * 5. 연산처리 => 제어
 */
public class 변수_2 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
        // 모든 숫자는 다 int
		System.out.println(0b11111111); // int로 인식되서 0b 붙였어도 0다 생략됨
		System.out.println(~127); // ~ 는 음수를 표현할 때 쓰는 연산자
		System.out.println('A'+'B'); //131
		System.out.println("A"+"B"); //AB
		System.out.println((int)'A'); //65
		System.out.println((int)'a'); //97
		System.out.println((int)'0'); //48
		System.out.println((int)'+'); //43
		System.out.println('A'+'+'); //108
		System.out.println(0b1010); //10 2진법
		System.out.println(01010); //520 8진법
		System.out.println(8*8*8+8);
		System.out.println(0x1010); // 4112 16^3 + 16^1
        System.out.println(16*16*16+16);
	
		
		float f = 10.5f;
		double d = 10.5D; //D는 생략가능
		
		System.out.println(f);
		System.out.println(d);
		
		
	}

}
