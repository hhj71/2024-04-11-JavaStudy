/*
 * 변수 : 한개의 데이터를 저장하는 메모리 '공간'의 이름
 *      ------------
 *   -> 필요시에는 변경이 가능/ 데이터를 저장해서 재사용할수 있게 함.
 *         
 *         메모리 공간 => 4byte씩 나눠진다
 *      0---------------
 *            사용중  
 *      4---------------
 *            사용중
 *      8---------------
 *             10    ====> 이 '공간'의 별칭 a      
 *      12--------------
 *      
 *      16--------------
 *            ....
 *            ....
 *            
 *   1) 변수 명칭법 (클래스, 상수, 메소드, 인터페이스, 추상클래스, 배열... 등등 도 이러한 방법을 따라가야 한다.)
 *     1. 알파벳이나 한글로 시작한다.
 *           *알파벳 사용시에는 대소문자를 구분해야 한다. a/A는 별개의 공간
 *     2. 숫자 사용이 가능하다.  ex)a1, a2...
 *           *단 첫글자에는 사용이 불가능하다.
 *     3. 특수문자 2가지 (_ , $)만 사용이 가능하다 => 단어가 2개일때  ex)file_name
 *              * _name 과 같이 _가 앞에 있는 경우는 임시 변수라고 보면 됨.   *위치는 상관이 없다 
 *              * ex) _temp => 정렬할 때 사용            
 *     4. 키워드는 사용할 수 없다. ex) int, byte, long, boolean, char...
 *         * 자바에서 이미 사용중인 단어 (예약어)는 사용이 불가능하다.       
 *     5. 공백이 있으면 안된다. ex) a b
 *     6. 변수명에 대한 제한이 없다. 
 *        *but 3~10글자로 만드는 것이 좋고 의미가 나타나는 변수명이 좋다. 
 *                                     ex) 국어점수 : a 보다는 korScore      
 *  ----------------------------------------------------------------          
 *       int korScore = 89 ->실제 저장된 값(메모리)-리터럴
 *           └>변수 - 다음에 다시 사용함     
 *   2) 변수의 형식
 *       데이터형 변수명 = 값
 *         |메모리 크기
 *       데이터형
 *       ------
 *       정수 
 *         1byte => byte => 파일읽기/파일쓰기/업로드/다운로드/네트워크 전송에 사용/ 메모리 공간을 절약할 때 많이 사용 but 요즘은 속도(퍼포먼스)를 더 중요시함 (-128~127)
 *         2byte => short => 사용빈도는 거의 없다 (C언어와 호환성 때문에 나옴) (-32768 ~ 32767)
 *         4byte => int => default 값 (다른 표기가 없으면 컴퓨터는 무조건 숫자를 int로 인식) (약 -21억 4천 ~ 21억 4천 ) ┐ 구분 어려움
 *         8byte => long => 금융권에서 주로 사용                                                              ┘ 구분- 숫자뒤에 L (long) 붙임.
 *         
 *         -> 컴퓨터에 저장
 *                  - 0,1로
 *              1byte => 8bit(0,1 => 8로 저장) => 127까지만 저장 가능 => 음수는 2의 보수를 사용하고 있기 때문에 (127+1) -128까지만 저장가능 ==> -128~127 이 범위를 벗어나면 오류 발생.
 *                └> ex) byte b=127; 
 *          -----------------------------------
 *          부호 비트 1 1 1 1 1 1 1
 *          0=> 양수, 1 => 음수
 *               
 *       실수 
 *         4byte 
 *         8byte
 *       문자 
 *        2byte
 *       논리     
 *        1byte
 */
public class 변수_1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		byte b1=-128; // 데이터형 변수명 = 실제 메모리에 저장한 값 // 맨 앞에 final 붙이면 상수로 변함. 
		//System.out.println(b1);
		
		long a = 21000000000L;
		long b2 = 210000;
		int b = 21000;
		/*
		 * 초기화를 하는 방법
		 * 1) 선언과 동시에 초기값 부여
		 *      int a= 10;
		 * 2) 선언을 먼저, 나중에 값을 대입
		 *     int a;
		 *     a=10;
		 * 3) 여러개를 동시에 선언
		 *     int a=10;
		 *     int b=20;
		 *     int c=30;
		 *    ┌ int a,b,c;
		 *    └ a=b=c=10;
		 *    int a=10,b=10,c=10;             
		 * 
		 *
		 * 초기값을 부여하는 방법
		 * 1. 명시적 초기화 ex) int a = 100;
		 * 2. 난수 발생 - 임의로 숫자를 추출해서 부여 
		 * 3. 사용자로부터 값을 받아서 초기화 
		 * !초기값 없이 사용하면 오류가 난다!
		 * 
		 */
		
    // 문제) 국어 영어 수학 점수를 총점을 계산해서 출력하라 -> 변수를 3개로 잡을 수도 있고 4개로 잡을 수도 있음...
		int kor=90; //=> 4byte 메모리 공간을 만들어서 -> kor 이름으로 90을 저장한다.
		int eng=80; // 초기화함  
		int math=70;
		System.out.println(kor+eng+math);
		int total = 0;
		
		
		/*
		 * 변수의 종류
		 * ----------
		 * 1. 지역변수 : 반드시 초기화를 해서 사용해야 한다. 
		 * 2. 멤버변수
		 * 3. 공유변수
		 * 4. 참조변수
		 */
		
		/*
		 * 논리형 => boolean => 저장하는 값 => true/false
		 *  - 1byte => true = 1, false = 0
		 *  - 사용하는 위치는 조건을 사용할 때
		 *  - 형식) boolean bCheck = false;
         */
		boolean bCheck = false;
		System.out.println(bCheck);
		
		/*
		 * 문자형
		 * => char: 멀티바이트 => 2byte
		 *   -----  
		 *     | c언어 => 싱글바이트 => 1byte
		 *       => 각 문자마다 번호를 부여 (ASC)
		 *       => 0~65535
		 *       => 0~255
		 *       => A -> 65
		 *       => a -> 97
		 *       => '0' -> 48
		 *       => 표현 방식 => 문자 1개 만 => ''
		 */
		
	   char hakjum = 'B';
	   System.out.println(hakjum);
	   char fname = '홍';
	   System.out.println(fname);
	   char num = '0';
	   System.out.println((int)num);
		
		
	}

}
