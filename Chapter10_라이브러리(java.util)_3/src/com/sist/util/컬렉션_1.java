package com.sist.util;
/*
 * 	컬렉션(Collection)
 * 	=> 데이터가 많은 경우에 처리를 쉽고 효율적으로 관리 가능하게 만드는 자료구조
 * 		=> 라이브러리 => 표준화 (모든 개발자가 같은 코딩으로 사용)
 * 					  ----- 
 * 		=> 자료구조 : 데이터 수정, 데이터 추가, 데이터 삭제, 데이터 읽기 => CRUD
 * 		=> 배열은 고정적 => 선언과 동시에 저장 개수를 지정해야 한다 (추가, 삭제가 어렵다)
 * 		   ---------- 추가 -> 큰 배열을 다시 만들어야 한다
 * 		   ---------- 삭제 -> 작은 배열을 다시 만들어야 한다
 *         ---------- 보완 (가변형) => 자동 증가, 자동 축소 => 컬렉션
 *         			  ---------- 데이터 관리 => 사용법 알아두는게 중요
 *         
 *  => 컬렉션의 구조 => 검색 가능
 *  		Collection =====> interface
 *  			|
 *   --------------------------------------------------------------------------------------------------------
 *   |                                                   |                                                  |
 *  List                                                Set : 인터페이스                                     Map
 *  일자배열                                              묶음                                                => 사용빈도가 적다
 * ------------                                          |                                                 => 라이브러리에서는 사용빈도가 상당하다
 *  1  2  3  ...                                       구현된 클래스                                          => 두개를 동시에 저장한다
 * ------------                                         HashSet : 중복 제거                                      -> 구분자/데이터
 * => 데이터 중복 허용                                     TreeSet : 검색 => 속도 빠르다 (binary search)                 -> 구분자: key , 데이터: value
 * => 데이터 구분 -> 인덱스                               => 데이터 중복이 없다                                              -----------   -----------
 *    (순서가 존재)                                          -> ArrayList에서 중복된 데이터를 제거                            |중복이 없다    |중복이 가능하다
 *    *** 인덱스는 자동 추가                                     ex) 지니/멜론 -> 중복이 안된 노래만 출력                      ex) name="홍길동"
 *    	  ----- 추가 (인덱스 자동 증가)                        -> 데이터 중복이 없기 때문에 검색이 가능 (데이터만 가지고)               ----  -----
 *        ----- 삭제 (인덱스 조정)                            -> 순서가 없다(인덱스 번호가 필요가 없다)                             key   value
 *        ----- 0번부터 시작                            => 자바 자체 프로그램 개발할 때 사용                                -> 웹에서 주로 사용
 * => 구현된 클래스                                          -> 오라클은 기능(검색, 중복제어하는 기능) 있음                     ex) ?page=1
 * 	  ----------                                             ---- 명령어를 이용해서 데이터 수집                                ----  --  => getParameter("page") => 1
 * 	 ★ArrayList                                                                                                         -> request : 사용자가 보내준 값을 받을 때 사용
 * 	   => 데이터베이스의 저장된 값을 저장후 브라우저에 전송                                                                        -> response
 *         -> 웹프로그램                                                                                                   -> session
 *     => Vector의 단점 보완                                                                                               -> cookie
 *     	  => 비동기적인 방식                                                                                           -> 스프링 : 클래스 관리
 *           -> 단점: 데이터가 순차적으로 저장이 안된다                                                                     -> MyBatis : SQL 관리
 *                   -> 정렬을 해서 저장후 사용해야 함                                                           ★HashMap : 비동기, HashTable을 보완 ┐ => 저장 put(key,value)
 *                   -> 오라클에서 정렬                                                                        HashTable : 동기                 ┘     읽기 get(key)
 *                     ------------- ORDER BY no
 *                      = 데이터 검색(읽기) : SELECT
 *                      = 데이터 추가 : INSERT
 *                      = 데이터 수정 : UPDATE
 *                      = 데이터 삭제 : DELETE
 *        => 접속 속도를 빠르게 개선 
 *     => 사용처 -> 웹 프로그램에서 주로 사용 ★  
 *          
 * 	  Vector 
 * 	    => 네트워크의 접속자 정보 저장
 * 			 => 동기적인 방식
 *           => 접속 속도가 느리다
 *           => 네트워크 -> 서버에서 사용해볼 예정
 *              
 * 	  Stack : LIFO 구조 (Last In First Out)
 * 		=> 변수저장
 * 		=> 사용을 권장하지 않는다
 * 
 * 	  LinkedList : 추가, 삭제가 빠르다
 * 				   접근 속도가 느리다
 * 				   C언어 호환
 * 		   |
 * 		 Queue : FIFO 구조
 * 				 => 네트워크 전송, 운영체제 스케줄러     
 *         
 *         										*** ArrayList, HashSet, HashMap => 일반 기본값을 저장, 클래스 저장이 가능
 *         											=> 모든 데이터 저장이 가능하게 만든다
 *         											   -------------
 *         												| 매개변수/리턴형 => Object 
 *         												  Object가 있는 경우
 *         												  -------- 모든 데이터의 가장 큰 데이터형 => 형변환을 해서 사용한다
 *                                                   => 필요시에는 매개변수/리턴형을 프로그램에 맞게 변경이 가능하게 만들어준다
 *                                                      -------------------------------------------------------
 *                                                      	-> 제네릭
 *                                                             -> 데이터형을 한번 통일 (라이브러리 자체 매개변수/리턴형)
 *                                                             -> 간결하다, 가독성이 좋다 (어떤 데이터를 저장해서 관리하는지 알 수 있다) --> 형변환이 필요없다
 *                                                             	 ex) ArrayList list = new ArrayList()
 *                                                             		  -> ArrayList<String> list = new ArrayList<String>()
 *         																		==> String을 저장
 *                                                                    -> ArrayList<Movie> list = new ArrayList<Movie>() 
 *                                                                    		    ==> 데이터를 모아서 관리 => 1개의 데이터형을 저장하는걸 권장한다
 *         
 *  ** 프로그램
 * 중요:(이해, 형식)(명령문 연습)  (흐름)
 *  	자바       오라클      HTML/CSS
 *      ---       ----      --------
 *       |         |          |
 *       ----------           |
 *            |               |
 *         연동 (JDBC)         |
 *            |               |
 *            -----------------
 *                    |
 *                   JSP
 *    ==================================== 통합 => 프레임워크 (스프링) => 라이브러리 (MyBatis, JPA)
 *     => 기본 조립 => 라이브러리 + 메소드 사용법 
 *     				 --------------------- 저장할 변수 설정                 
 *       
 *  ** 자료구조 : 메모리에서 데이터 관리 
 *  			 => ★ 추가 : add() => 데이터베이스 (오라클) => 데이터 담기
 *  			 =>   삭제 : remove()
 *  			 => ★ 읽기 : get() => 화면 => 데이터 읽기 => HTML을 이용해서 브라우저 출력
 *  			 =>   수정 : set()
 *  			 =>   전체 삭제 : clear() 
 *               => ★ 저장 개수 : size() => for를 이용해서 출력횟수 확인
 *               ----------------------------------------------------> 대부분 데이터가 오라클에 저장 => 메모리보다는 오라클 안에서 제어해야 한다
 *                  
 */
import java.util.*;
public class 컬렉션_1 {
    // 데이터를 모아서 처리 => 같은 데이터형을 모아서 처리 => 효율적 => 제네릭
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		ArrayList list = new ArrayList();
//		ArrayList<String> list = new ArrayList<String>();
		// 문자열만 저장해서 관리
		// 제네릭 이용 => add(Object) => add(String) => 사용자 정의 데이터형으로 변경이 가능
		// => 가급적 1개의 데이터형을 저장한다 
		// 		    ----------- 데이터형이 통일됨 -> 반복문 수행이 가능하다
		list.add("홍길동"); //0
		list.add(10); //1
		list.add(10.5); //2
		list.add(true); //3
		list.add('A'); //4
		
		for(int i=0; i<list.size(); i++)
		{
//			String name = (String)list.get(i); // 오류 발생 -> 데이터형이 통일이 안돼서 반복문 수행 불가
			if(i==0)
			{
				String name = (String)list.get(i);
				System.out.println(name);
			}
			else if(i==1)
			{
				int no = (int)list.get(i);
				System.out.println(no);
			}
			else if(i==2)
			{
				double d = (double)list.get(i);
				System.out.println(d);
			}
			else if(i==3)
			{
				boolean b = (boolean)list.get(i);
				System.out.println(b);
			}
			else if(i==4)
			{
				char c = (char)list.get(i);
				System.out.println(c);
			}
		} 
	}

}
