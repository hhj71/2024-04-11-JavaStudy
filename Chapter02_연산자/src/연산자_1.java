/*
 * 자바의 기본 문법
 *   => 1. 데이터 저장
 *         - 변수 / 상수 => 데이터를 한개만 저장하는 공간
 *         - 배열 => 여러개를 동시에 저장 but 같은 형만 저장 가능
 *         - 클래스 => 여러개를 동시에 저장 => 다른 데이터형을 저장할 수 있다.
 *    
 *   => 2. 데이터 가공 (사용자 요청시에)
 *         -연산자/제어문
 *         -메소드 
 *  
 *   => 3. 가공된 데이터를 출력
 *        *출력장소 - 명령프롬프트 : Application => 윈도우
 *               - 브라우저 : Web Application 
 *               - 핸드폰 : Mobile Application -> Java (X), Kotlin, Flutter(Dart)
 *     
 *   => 4. 데이터 분석 : 파이썬
 *   => 5. AWS            
 *          
 * 객체지향 프로그램
 * 예외처리
 * 라이브러리 활용
 * --------------------------
 * 커리큘럼 순서 
 * 1) 오라클 연결
 * 2) Web 프로그램 => JSP => JQuery(Ajax) => 1차 프로젝트
 * 3) Spring => VueJs => 2차 프로젝트
 * 4) Spring-boot => React => 3차 프로젝트 (개인)
 * 5) Python : Numpy, Pandas, Matplotlib
 * 6) AWS (클라우드) => 호스팅
 *  **** 부가적으로 나오는 내용들 - Full-stack : JavaScript => 동적 페이지
 *                                        JQuery(Ajax), VueJs, React(Redux, React-Query)
 *                         **(아직 미정) : TypeScript, NextJS       
 * 
 * 2024-04-15 연산자
 * 1) 변수 
 *     데이터를 저장하기 위한 작업
 *     1. 메모리에 별칭 설정 -> 주소대신 이름을 부여하여 저장
 *        - 식별자 (변수 명) => 한개의 클래스 내에서는 같은 변수명을 사용할 수 없다.
 *                       => 알파벳(대소문자 구분)이나 한글로 시작한다. 
 *                       => 문자의 갯수는 제한이 없다. (기본적으로는 3~10글자로 압축하는 것이 좋다.)
 *                       => 어떤 데이터가 저장되어 있는지 확인할 수 있게 짓는게 좋다.
 *                       => 숫자를 사용할 수 있다.(맨 앞에는 사용 금지)
 *                       => 특수문자 사용이 가능 ( _ , $ ) -> 위치는 상관없음
 *                       => 키워드: 자바에서 사용하는 문자열(단어)
 *                          ex) int, double 등... 보라색으로 써있는 단어들...
 *                       => 공백을 사용할 수 없다. ex) int a  b ->오류
 *                                            
 *     2. 메모리 크기(데이터형)
 *        정수 < 실수 ( ex) 크기가 바이트 크기가 아니라 수에 대한 표현의 크기. 
 *        
 *     3. 변수 형식
 *        -데이터형 변수명 ;
 *        *** 사용시에는 반드시 변수명=값을 대입해야 사용가능
 *     4. 초기값
 *         - 임의로 지정함 => 변수(필요시에 따라 변경이 가능)
 *        1) 선언 => 초기값
 *           - 사용자로부터 값을 받을 경우, 난수 (임의로 추출)
 *        2) 선언과 동시에 초기값 
 * -------------------------------------------------------------------------------------------------------
 *  연산처리
 *  피연산자/연산자
 *  
 *  - 단항연산자 : 연산 대상이 1개
 *     => 증감연산자 : 1개 증가/ 1개 감소 => ++, --
 *        ex) int a=10;
 *            a++;
 *            ===> a=11
 *            
 *            int a=10;
 *            a--;
 *            ===> a=9
 *     => 부정연산자 : true ↔ false => ! 
 *                  boolean 만 사용가능 / 조건에 사용 ex) 로그인, 검색어...
 *                  ex) boolean b=true
 *                  !b ===> false       
 *     => 형변환연산자 : 모든 데이터형은 변경이 가능하다. (boolean 제외)
 *                   int=>double , double => char....
 *                   형식 ex) 10.5 ==> double
 *                          (int)10.5 ==> int ====> 10
 *   
 *  - 이항연산자 : 연산 대상이 2개
 *      => 산술연산자
 *         +, - , * , / , %(나머지)
 *      => 비교연산자 : 결과값 => boolean (true/false)
 *             └  == (같다) 
 *                != (같지 않다)
 *    기준점이 왼쪽    <  (작다)
 *                 >  (크다)
 *                 <= (작거나 같다)
 *                 >= (크거나 같다)
 *      => 논리연산자
 *          && : 양쪽의 조건이 모두 참이면 참, 하나라도 거짓이면 거짓
 *          || : 양쪽의 조건중에 하나만 참이면 참.
 *                               
 *      => 대입연산자 : 결과값을 다시 저장할 경우
 *          '=' = 대입
 *           =
 *          +=
 *          -=
 *          /=
 *          %=
 *          op=
 *      
 *      => 삼항연산자 : 연산대상이 3개 => if~else => 페이징, 복잡한 소스코딩이 있는 경우
 *                                         => 웹, 게임프로그램, 네트워크 프로그램
 *           (조건)?값1:값2
 *            => 조건이 true 면 값1 / false 면 값2
 *            
 *  38page => 산술연산자 (+,-,*,/,%)
 *             ** 주의점 : 자바의 모든 연산은 같은 데이터형끼리만 가능
 *            int +int = int
 *            long + long = long
 *            int + long = long --> long으로 변경후에 연산 (데이터형을 큰형으로 변경후에 연산)
 *           ** 주의
 *           byte+byte = int
 *           char+char = int
 *           byte+char = int
 *           ------------------- int 보다 작은 데이터형은 연산시에 결과값이 int
 *           
 *           ex) int + double + char = double
 *                10    10.5     'A'                                    
 *                 └ 20.5 ┘       |           
 *                     └--------65.0         
 *                 -------------------
 *                   85.5         ==> 결과값은 가장 큰 데이터형이 나온다
 *          --> +,-,* => 동일
 *          
 *          ** 주의 
 *          - 0으로 나누면 오류발생 ex) 10/0 ->오류 -> 0으로 나눌 수 없다.
 *          - 정수/정수 => 정수(실수점 제외) => 소수점이 필요할 때는 정수/실수 로 연산해야 함.
 *            ex) 5/2 = 2
 *          
 *          - % => 나누고 나머지 값 / 배수 찾을 때 사용
 *              5%2 => 1
 *              ** 주의점
 *                     5%2 = 1
 *                     5%-2 = 1
 *                     -5%2 = -1
 *                     -5%-2 = -1
 *              -------------------왼쪽편 부호를 따라간다.     
 *              
 *
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 *         
 */
public class 연산자_1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	//국어 영어 수학 => 총점, 평균
		int kor=80;
		int eng=75;
		int math=90;
		
		int total=kor+eng+math;
		double avg= total/3.0;
		System.out.println("국어 점수:"+kor);
		System.out.println("영어 점수:"+eng);
		System.out.println("수학 점수:"+math);
		System.out.println("총점:"+total);
		System.out.printf("평균:%.2f",avg); 
				
		
		
	}

}
