/*
 * 1. 자바 실행 과정
 *    -----------
 *            2진 파일 변경 (0,1 => 컴퓨터 인식)
 *               컴파일                인터프리터
 *    A.java ------------> A.class ---------------> 실행 
 *   (원시소스)   javac    (바이트 코드)   java          |
 *       |                    |                   한줄씩 번역
 *   자바프로그래머만 인식       기계어
 *                        컴퓨터만 인식
 *                         배포 (AWS)
 *                              
 *             ** 컴파일 / 인터프리터 (기술면접에서 나올 가능성 있음) 
 * 
 * 2. 자바
 *    변수 / 상수 / 리터럴
 *  - 변수 : 데이터가 저장된 주 기억장치 속 기억장소
 *          데이터를 저장하는 메모리공간의 별칭 
 *                         ------ 주소 (0번 ~ 크기)                    
 *      ** 변수 => 읽기/쓰기 => 쓰기 하면 덮어쓴다
 *           int a = 10;
 *           a = 20
 *           a = 30  ====> 최종적으로 메모리에 저장된 값 
 *      ** 변수 선언 
 *         --- 데이터형을 알아야 할 수 있음
 *              ==> 기본형 : 자바에서 제공
 *                         정수/실수/문자/논리
 *                        byte/int/long//double//char//boolean
 *                         
 *              ==> 참조형 : 여러개 데이터를 모아서 저장 => 메모리 주소만 이용
 *                           배열 / 클래스 => 사용자 정의 
 *              ==> 지역변수 : 기본형
 *              ==> 멤버변수 : String + 기본형 => 배열(특별한 경우가 아니면 빈도수가 없다)
 *                                             --- 
 *                                              고정, 보완한 것이 컬렉션                  
 *     *** 변수
 *        - 지역변수 => 메소드 안에 선언된 변수
 *                    메소드 안에서만 사용이 가능
 *                    반드시 초기화를 한 다음 사용한다. 
 *                    (= 매개변수)
 *                 => stack 공간에 저장된다. => 메모리가 자체 관리하는 공간 => {}가 끝나면 자동으로 사라진다.
 *                 => 변수가 저장되는 시기 : 메소드 호출시 마다
 *        -------------------------------------------------------------------------------------
 *        * 클래스 영역에 선언되는 변수
 *          ** 웹 => 다른 시스템이나 다른 클래스에서 사용이 가능한 변수들이다.
 *        - 멤버변수 : new를 사용시마다 따로 저장되는 변수
 *                  => 변수가 저장되는 시기 : new 사용시
 *                  => 자바에서 가장 많이 사용되는 변수
 *        - 공유변수 : 저장공간이 1개라서 모든 클래스 변수에서 공유해서 사용 ==> static
 *                    => 변수가 저장되는 시기 : 컴파일 될 때
 *                    => 사이트의 데이터는 모든 사람들이 동일하게 볼 수 있어야 해서 공유변수 사용    
 *        --------------------------------------------------------------------------------------                  
 *  - 상수 : 데이터를 저장하는 메모리공간
 *          => 변경할 수 없다
 *          => final
 *  - 리터럴 : 실제 값
 *                 ex) int a = 10;
 *                             --- 리터럴
 *  * 식별자 : 클래스명, 메소드명, 변수명, 인터페이스, 열거형, 어노테이션, 추상클래스명, 내부클래스
 *    규칙)
 *    1. 알파벳이나 한글로 시작한다. (but 한글은 운영체제에 따라 깨질 수 있기 때문에 권장 x)
 *        -> 대소문자 구분
 *    2. 숫자 사용이 가능 but, 앞에는 사용금지
 *    3. 특수문자 2가지 사용 가능 (_,$)
 *    4. 키워드는 사용 금지 (키워드를 사용하게 되면 빨간색으로 나옴)
 *    5. 공백이 있으면 안된다.
 *    
 *    **자바 프로그래머들끼리의 약속
 *      1) 클래스, 인터페이스, 추상클래스, 내부클래스 => 첫자를 대문자로 한다
 *        ex) class MainClass
 *            interface MainInterface
 *            abstract class MainClass
 *            class Abc
 *            {
 *               class Bcd
 *               {
 *               
 *               }
 *            }  
 *       2) 변수, 메소드 => 소문자로 시작한다.
 *       3) 상수 => 모든 문자를 대문자로 한다.
 *       4) 길이에는 제한이 없다 but, 3~7글자로 결정하는 것이 좋다
 *            -> 약간의 의미만 부여 하는게 좋다 
 * =======================================================================================================↑ 데이터 저장           
 *  데이터 처리
 *   1. 연산자
 *      1) 단항연산자 (++,--,!,(type))
 *                             └> 형변환연산자 (논리형은 제외)
 *      2) 이항연산자
 *             = 산술연산자 : +, -, *, / ,%
 *                          *** + 는 문자열 결합에도 사용된다.
 *             = 비교연산자 : ==, !=, < , > , <= , >=
 *             = 논리연산자 : &&, ||
 *             = 대입연산자 : = , +=, -=
 *      3) 삼항연산자 : (조건)값1?값2
 *                 => 웹에서 많이 등장                              
 *   
 *   2. 제어문
 *        1) 조건문 : if, if~else, if~ else if ~else
 *        2) 반복문 : for(1차 중심으로 공부), while(1차 중심으로 공부)
 *        3) 반복제어문 : break
 *        
 *   3. 메소드 (연산자 + 제어문)
 *      형식)
 *         리턴형 메소드명 (매개변수 목록) <= 선언부
 *         {
 *              구현부
 *               ...
 *              return 값
 *                     --- 리턴형과 데이터형이 일치해야 함. => 리턴형에 해당되는 데이터를 보낸다
 *                         * 리턴형이 void면 return 생략이 가능하다 => 컴파일러가 자동으로 return을 추가해준다.
 *                         * void는 결과값이 없는 경우 -> 메소드에서 자체 출력
 *                                                 -> 오라클이나 파일을 연결하면 => 추가, 삭제, 수정할 때
 *         }
 *                                                 => 결론적으로 데이터를 읽어온 경우에만 값이 존재한다.
 *      1) 리턴형 : 요청에 대한 결과값
 *               => 기본형 (int, byte, long, double...)
 *       			배열 : int[] , String[] , ...
 *        			클래스 : Student , String, Music,.... => 상세보기에 많이 사용한다
 *      2) 매개변수 : 사용자의 요청 값
 *                => 기본형 => Call By Value : 새로운 메모리 생성
 *                   배열 / 클래스 => Call By Reference : 매개변수 자체 처리
 *                                                         └> 얕은 복사 => 별칭을 이용한다.
 *     ++ 결과값은 경우의 수를 잘 따져봐야 함
 *           경우의 수 2개 => boolean
 *           경우의 수 여러개 => String, int
 *         ex) 로그인 
 *              => id, pwd => 매개변수
 *              -> 리턴형
 *                 - 아이디가 없는 경우 (1)
 *                 - 비밀번호가 틀린 경우 (2)
 *                 - 로그인 상태 (3)
 *                   ====> String, int(숫자로) 둘 다 가능     
 *       
 */
public class 자바_마지막정리 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
