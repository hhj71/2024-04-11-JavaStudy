package com.sist.main;
import java.util.Scanner;

import com.sist.manager.*;
import com.sist.vo.Movie;
/*
 *     변수
 *     
 *     ---------------------------------------------------------------------------------------------------------------------
 *     종류 											메모리에 저장되는 시점         사용범위            메모리 해제          저장위치	
 *     ---------------------------------------------------------------------------------------------------------------------
 *     인스턴스변수                                       new 클래스명()         자신의 클래스 전체     프로그램 종료시         Heap
 *                                                    => 메모리 따로 저장해줌   => 다른 클래스 포함
 *     class A
 *     {
 *     	 int a;  //4byte
 *       int b;  //4byte
 *       double c;  //8byte
 *       static int d;
 *     } ==> new 사용시 메모리 크기 => 16byte
 *           -> 인스턴스 변수만 new 사용
 *           -> static은 제외 (공통이라서)     
 *       => A는 사용자 정의 데이터형 
 *     ** 모든 클래스는 4byte (주소)  
 *     class A                                               
 *     {
 *     	 [접근지정어] 데이터형 변수명;
 *       클래스 블록안에 선언
 *       => 다른 클래스에서 사용이 가능
 *     }  
 *     ----------------------------------------------------------------------------------------------------------------------
 *     정적변수(static)                            컴파일시에 메모리에 저장됨       자신의 클래스 전체      프로그램 종료시      MethodArea  
 *     class A                                   접근방식: 클래스명.변수명        => 다른 클래스 포함
 *     {                                         new 없이 저장이 가능
 *        [접근지정어] static 데이터형 변수명;
 *        클래스 블록안에서만 선언이 가능
 *        => 다른 클래스에서 사용이 가능
 *     }   
 *     ** 모든 클래스가 공유할 수 있다 (공개) 
 *         => 메모리공간 1개만 생성
 *     ** 자바에 사용하는 메모리 (저장위치)
 *         --------------------
 *         MethodArea => 메소드, static 변수 
 *         --------------------
 *         Stack => 지역변수, 매개변수 => 메모리 자체 관리 => 메소드가 종료되면 자동으로 사라진다
 *                  -------------- 메소드안에서 사용이 가능
 *         --------------------
 *         Heap => 배열, 클래스 멤버변수 => 프로그래머가 관리 
 *         --------------------    
 *             1. int malloc(sizeof(A)), 2. free(A)
 *                 메모리 할당                 메모리 해제
 *              ==> new                       delete
 *              ==> 프로그래머가 삭제에 소홀 : 프로그램을 종료하면 자동으로 운영체제에서 삭제되기 때문에
 *                  -> 변수가 많아지면서 문제 발생 ==> 가비지 컬렉션 (자동 메모리 회수)   
 *                                                ----------
 *                                                 => 프로그램 종료시쯤 회수함 바로바로 안함
 *                                                 => 멀티미디어 => 직접 회수 : System.gc()
 *     -----------------------------------------------------------------------------------------------------------------------
 *     지역변수                                     메소드 호출시마다 메모리 생성      메소드안에서만 사용   메소드가 종료할 때       Stack
 *     void display()                                                                              (return)         -> LIFO
 *     {                                                                                                          (Last In First Out)
 *     	  int a=10;
 *         { 
 *            int b=20;
 *             {  
 *               int c=30; ===> 생성되는 순서 a=>b=>c
 *             }                해제되는 순서  c=>b=>a
 *         }   	
 *     }
 *       
 *     void display()
 *     {
 *         데이터형 변수명;
 *     		=> 메소드안에 선언
 *     		=> 접근지정어 사용할 수 없다
 *          => static 사용할 수 없다
 *          => 유일하게 사용이 가능한 것 
 *              final (상수)
 *          => 이 블록(메소드 블록) 안에서만 사용가능 
 *          => 다른 클래스에서 사용 불가   
 *     }
 *     ** 멤버변수는 2가지 (static, 인스턴스변수(객체변수))
 *         => 자동 초기화
 *            int a => 0
 *            double => 0.0
 *            String(클래스) => null
 *                            ----- 
 *                   실제 저장된 데이터의 주소가 없는 상태
 *                             => new
 *            boolean => false                 
 *         지역변수는 자동 초기화가 안된다.(초기화 해줘야 한다)
 *     -----------------------------------------------------------------------------
 *     
 *     * 변수
 *        저장하는 데이터가 여러개 => 따로 메모리를 만들어서 저장해줘야 한다
 *                            => 인스턴스 변수
 *        저장하는 데이터가 1개   => static 변수
 *        사용하고 필요가 없다    => 지역변수                    
 *     
 *         for(int i=1; i<=10; i++) // i는 지역변수
 *         {
 *         }
 */
public class MainClass {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner scan=new Scanner(System.in);
		System.out.print("페이지 입력:");
		int page =scan.nextInt();
		Movie[] m=
		//1. 목록
		System.out.println("================= 영화 목록 ==================");
		// 메모리에 저장이 된 상태 => 컴파일시에 메모리에 저장 => Method Area
		// static 을 이용하면 메모리 공간이 1개 생성 => 모든 클래스에 공유가 가능
		// 변경 => 모든 클래스에서 변경된 데이터를 사용해야 함
		for(Movie movie:MovieManager.movies)// movies(public) => 접근이 가능 static => 클래스명으로 접근
		{
			System.out.println(movie.getMno()+"."+movie.getTitle());
			// 값을 출력/ 값을 읽어오는 경우 : getXxx()
			// 값을 저장/ 값을 변경하는 경우 : setXxx()
		}
	}

}
